.small
	markdown:
		## LCBの実装方針

		* LCBの実装にあたり，ReceptorとWorkerという2つのElixirプロセスを用意する
			* Receptor はLCBスレッドへのリクエストを受取り，すぐさまWorkerにコマンドを送った後，すぐに次のリクエストを待つ
				* こうすることで，遅滞なくリクエストを受け取ることができるようにする
			* WorkerはReceptorのプロセスIDと実行環境変数`env`を引数とする関数である
				* `env`には現状では次の3つの情報が入っている．
					* `:queue`: 実行キュー，すなわち次以降に実行するコールバック関数の待ち行列を表すリスト
					* `:threads`: 現在のLCB IDとコールバック関数の対応関係を保持するマップ
					* `:next_tid`: 次にLCBを新規生成した時のIDを記録する
				* Workerの動作
					* Workerは最初にReceptorからのすべてのコマンドを受け取り，実行キュー`env[:queue]`に登録していく
					* Receptorからのコマンドが空になったら，実行キューからコマンドを1つ取り出し，そのコマンドのLCBのIDを引数にしてコマンドが指す関数をコールバックしてWorkerを再帰呼び出しする
					* 実行キューに何もなかった場合は10msスリープして，Workerを再帰呼び出しする
				* Workerの持つ環境変数は，適宜Receptorに送られてバックアップされる
					* 将来的には，もしWorkerが何らかの理由で無反応になってしまったときにはWorkerを再起動する機能を実装する予定である